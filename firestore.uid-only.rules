rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Audit logs: readable by admins/superadmins only; not writable by clients
    match /audit_logs/{logId} {
      allow read: if userRole() in ['admin', 'superadmin'];
      allow write: if false; // only Cloud Functions service account writes
    }
  // Helpers (UID-only identity checks)
  function isSignedIn() { return request.auth != null; }
  function userRole() { return isSignedIn() ? get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role : null; }
  function isAdmin() { return userRole() == 'admin' || userRole() == 'superadmin'; }
  function isAM() { return userRole() == 'area manager'; }
  function isBA() { return userRole() == 'Iris - BA'; }
  function isTL() { return userRole() == 'Iris - TL'; }
  // Post-migration: assignedToBA / assignedToTL store UIDs only
  function isAssignedToBA(doc) { return doc.assignedToBA == request.auth.uid; }
  function isAssignedToTL(doc) { return doc.assignedToTL == request.auth.uid; }

  // Centralized transition helpers
  function strOk(v, max) {
    return v == null || (v is string && v.size() <= max);
  }

  function auditOnCreateOk(newData) {
    return newData.createdBy == request.auth.uid;
  }

  function auditOnUpdateOk(oldData, newData) {
    return newData.updatedBy == request.auth.uid && newData.createdBy == oldData.createdBy;
  }

  function srdTextLengthsOk(newData) {
    return (
      strOk(newData.issuesNotesRequests, 2000) &&
      strOk(newData.learningPoints, 2000) &&
      strOk(newData.guinessPromoDescription, 500) &&
      strOk(newData.guinessSmoothPromoDescription, 500) &&
      strOk(newData.guinessSmoothPromoDescriptionType2, 500) &&
      strOk(newData.guinessGfesPromoDescription, 500) &&
      strOk(newData.guinessGfesPromoDescriptionType2, 500) &&
      strOk(newData.guinessKegsPromoDescription, 500) &&
      strOk(newData.guinessKegsPromoDescriptionType2, 500) &&
      strOk(newData.guinessMdPromoDescription, 500) &&
      strOk(newData.guinessMdPromoDescriptionType2, 500) &&
      strOk(newData.guinessGdicPromoDescription, 500) &&
      strOk(newData.guinessGdicPromoDescriptionType2, 500) &&
      strOk(newData.merchandiseDescription1, 300) &&
      strOk(newData.merchandiseDescription2, 300) &&
      strOk(newData.merchandiseDescription3, 300) &&
      strOk(newData.merchandiseDescription4, 300) &&
      strOk(newData.merchandiseDescription5, 300)
    );
  }
  function canUpdateAttendance(before, after) {
    let statusBefore = before.taskAttendanceStatus == null ? '' : before.taskAttendanceStatus;
    let statusAfter = after.taskAttendanceStatus == null ? statusBefore : after.taskAttendanceStatus;
    // Allow BA assigned user to update only geo/selfie/audit fields without changing status
    let changedKeys = request.resource.data.diff(resource.data).changedKeys();
    let baAllowedOnly = changedKeys.hasOnly(['checkIn','checkInLatitude','checkInLongitude','checkOut','checkOutLatitude','checkOutLongitude','selfieUrl','updatedAt','updatedBy']);
    return (
      isAdmin() ||
      (isBA() && isAssignedToBA(before) && (
        baAllowedOnly ||
        (statusAfter == statusBefore) ||
        ((statusBefore == '' || statusBefore == 'pending') && statusAfter == 'pending')
      )) ||
      (isTL() && isAssignedToTL(before) && statusAfter == 'approved by TL') ||
      (isAM() && statusBefore == 'approved by TL' && statusAfter == 'approved by AM')
    );
  }

  function canUpdateEA(before, after) {
    let statusBefore = before.status == null ? '' : before.status;
    let statusAfter = after.status == null ? statusBefore : after.status;
    return (
      isAdmin() ||
      (isBA() && isAssignedToBA(before) && (statusBefore == '' && statusAfter == 'ASSESS BY BA')) ||
      (isTL() && isAssignedToTL(before) && ((statusBefore == 'ASSESS BY BA' || statusBefore == 'RE ASSESS BY TL') && statusAfter == 'ASSESS BY TL')) ||
      (isAM() && (statusBefore == 'ASSESS BY TL') && (statusAfter == 'ASSESS BY AM' || statusAfter == 'RE ASSESS BY TL')) ||
      (statusAfter == statusBefore && (
        (isBA() && isAssignedToBA(before)) ||
        (isTL() && isAssignedToTL(before)) ||
        isAM()
      ))
    );
  }

  function canUpdateQR(before, after) {
    let statusBefore = before.taskSalesReportQuickStatus == null ? '' : before.taskSalesReportQuickStatus;
    let statusAfter = after.taskSalesReportQuickStatus == null ? statusBefore : after.taskSalesReportQuickStatus;
    return (
      isAdmin() ||
      (isBA() && isAssignedToBA(before) && (statusBefore == '' && statusAfter == 'QR Done by BA')) ||
      (isTL() && isAssignedToTL(before) && (
        (statusBefore == 'QR Done by BA' && statusAfter == 'QR Done by TL') ||
        (statusBefore == 'Review back to TL' && statusAfter == 'QR Done by TL')
      )) ||
      (isAM() && (statusBefore == 'QR Done by TL') && (statusAfter == 'QR Review by AM' || statusAfter == 'Review back to TL')) ||
      (statusAfter == statusBefore && (
        (isBA() && isAssignedToBA(before)) ||
        (isTL() && isAssignedToTL(before)) ||
        isAM()
      ))
    );
  }

  function canUpdateSRD(before, after) {
    let statusBefore = before.salesReportDetailStatus == null ? '' : before.salesReportDetailStatus;
    let statusAfter = after.salesReportDetailStatus == null ? statusBefore : after.salesReportDetailStatus;
    return (
      isAdmin() ||
      (isBA() && isAssignedToBA(before) && ((statusBefore == '' || statusBefore == 'Review back to BA') && statusAfter == 'Done By BA')) ||
      (isTL() && isAssignedToTL(before) && (
        ((statusBefore == 'Done By BA' || statusBefore == 'Review back to TL') && statusAfter == 'Done by TL') ||
        (statusBefore == 'Done By BA' && statusAfter == 'Review back to BA')
      )) ||
      (isAM() && (statusBefore == 'Done by TL') && (statusAfter == 'Done by AM' || statusAfter == 'Review back to TL')) ||
      (statusAfter == statusBefore && (
        (isBA() && isAssignedToBA(before)) ||
        (isTL() && isAssignedToTL(before)) ||
        isAM()
      ))
    );
  }

    match /users/{userId} {
      allow create: if request.auth.uid == userId;
      allow get: if request.auth.uid == userId
                 || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['admin', 'superadmin', 'area manager', 'Iris - BA', 'Iris - TL'];
      allow list: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['admin', 'superadmin', 'area manager', 'Iris - BA', 'Iris - TL'];
      allow update: if
        request.auth.uid == userId ||
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'superadmin' ||
        (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin' && resource.data.role != 'superadmin') ||
        (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'area manager' && resource.data.role == 'guest');
    }

    match /projects/{projectId} {
      allow read: if request.auth != null;
      // Admins can create; only superadmin can delete
      allow create: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['admin', 'superadmin'];
      allow delete: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'superadmin';
      allow update: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['admin', 'superadmin', 'area manager'];
    }

    match /activations/{activationId} {
      allow read: if request.auth != null;
      // Admins can create; only superadmin can delete
      allow create: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['admin', 'superadmin'];
      allow delete: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'superadmin';
      allow update: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['admin', 'superadmin', 'area manager'];
    }

    match /outlets/{outletId} {
      allow read: if request.auth != null;
      // Only superadmin can delete outlets
      allow delete: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'superadmin';
      allow create, update: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['admin', 'superadmin', 'area manager'];
    }

    match /tasks/{taskId} {
      allow read: if (
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['admin', 'superadmin', 'area manager']
        || (
          get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'Iris - TL'
          && resource.data.assignedToUserTLID == request.auth.uid
        )
        || (
          get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'Iris - BA'
          && resource.data.assignedToUserBA == request.auth.uid
        )
      );
      allow create, update, delete: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['admin', 'superadmin', 'area manager'];
    }

  match /task_attendance/{attendanceId} {
      allow read: if userRole() in ['admin','superadmin','area manager','Iris - BA','Iris - TL'];
      allow create, delete: if userRole() in ['admin','superadmin','area manager'];
      allow update: if canUpdateAttendance(resource.data, request.resource.data);
    }

    match /task_quick_quiz/{quizId} {
      allow read: if (
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['admin','superadmin','area manager','Iris - BA','Iris - TL']
      );
      allow create, delete: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['admin','superadmin','area manager'];
      allow update: if (
        (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'Iris - BA' && resource.data.assignedToBA == request.auth.uid) ||
        (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['admin','superadmin','area manager'])
      );
    }

  match /task_early_assessment/{assessmentId} {
      allow read: if userRole() in ['admin','superadmin','area manager','Iris - BA','Iris - TL'];
      allow create, delete: if userRole() in ['admin','superadmin','area manager'];
      allow update: if canUpdateEA(resource.data, request.resource.data);
    }

  match /sales_report_quick/{reportId} {
      allow read: if userRole() in ['admin','superadmin','area manager','Iris - BA','Iris - TL'];
  allow create: if userRole() in ['admin','superadmin','area manager']
        && auditOnCreateOk(request.resource.data)
        && srdTextLengthsOk(request.resource.data);
  allow delete: if userRole() in ['admin','superadmin','area manager'];
  allow update: if canUpdateQR(resource.data, request.resource.data)
        && auditOnUpdateOk(resource.data, request.resource.data)
        && srdTextLengthsOk(request.resource.data);
    }

  match /sales_report_detail/{docId} {
      allow read: if userRole() in ['admin','superadmin','area manager','Iris - BA','Iris - TL'];
  allow create: if userRole() in ['admin','superadmin','area manager']
        && auditOnCreateOk(request.resource.data)
        && srdTextLengthsOk(request.resource.data);
  allow delete: if userRole() in ['admin','superadmin','area manager'];
  allow update: if canUpdateSRD(resource.data, request.resource.data)
        && auditOnUpdateOk(resource.data, request.resource.data)
        && srdTextLengthsOk(request.resource.data);
    }

    match /quiz_questions/{questionId} {
  allow read: if request.auth != null;
  // Allow only admins/superadmins to manage quiz questions
  allow create, update, delete: if userRole() in ['admin','superadmin'];
    }

    match /provinces/{provinceId} {
      allow read: if request.auth != null;
      allow write: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['admin', 'superadmin'];
    }

    match /cities/{cityId} {
      allow read: if request.auth != null;
      allow write: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['admin', 'superadmin'];
    }

    match /role_requests/{requestId} {
      allow create: if request.auth != null;
      allow get: if resource.data.userId == request.auth.uid;
      allow get, list: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['admin', 'superadmin', 'area manager'];
      allow update, delete: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['admin', 'superadmin'];
    }
  }
}
